openapi: 3.0.3
info:
  title: ManageItems
  version: 0.5.1
paths:
  /items:
    get:
      description: List items
      parameters:
        - in: query
          name: name
          schema:
            $ref: '#/components/schemas/ItemName'
          required: false
          description: Find items matching name.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemArray'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      description: Create item
      requestBody:
        content:
          application/json:
            examples:
              soup:
                value:
                  name: Soup
              tuna:
                value:
                  name: Tuna
              bread:
                value:
                  name: Bread
            schema:
              $ref: '#/components/schemas/ItemData'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
          description: Created.
          headers:
            Location:
              description: URI of new item.
              explode: false
              required: true
              schema:
                minLength: 1
                nullable: false
                type: string
              style: simple
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  '/items/{id}':
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/MongoId'
    get:
      description: View item
      responses:
        '200':
          description: Item found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      description: Update item
      requestBody:
        required: true
        content:
          application/json:
            examples:
              soup:
                value:
                  name: Soup
              tuna:
                value:
                  name: Tuna
              bread:
                value:
                  name: Bread
            schema:
              $ref: '#/components/schemas/ItemData'
      responses:
        '200':
          description: Item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      description: Delete item
      responses:
        '204':
          description: Item deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /orders:
    get:
      description: List orders
      parameters:
        - in: query
          name: email
          schema:
            $ref: '#/components/schemas/Email'
          required: false
          description: Find orders matching email.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderArray'
    post:
      description: Create Order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderData'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: Created.
          headers:
            Location:
              description: URI of new order.
              explode: false
              required: true
              schema:
                minLength: 1
                nullable: false
                type: string
              style: simple
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  '/orders/{id}':
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/MongoId'
    get:
      description: View order
      responses:
        '200':
          description: Order found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      description: Delete order
      responses:
        '204':
          description: Order deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      description: Update order
      parameters:
        - in: query
          name: email
          schema:
            $ref: '#/components/schemas/Email'
          required: false
          description: Update email of an order.
        - in: query
          name: preferences
          schema:
            $ref: '#/components/schemas/Preferences'
          required: false
          description: Update preferences of an order.
        - in: query
          name: restrictions
          schema:
            $ref: '#/components/schemas/Restrictions'
          required: false
          description: Update restrictions of an order.
      responses:
        '200':
          description: Order updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/orders/{id}/items':
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/MongoId'
    post:
      description: Add item to order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
          description: Created.
          headers:
            Location:
              description: URI of new item.
              explode: false
              required: true
              schema:
                minLength: 1
                nullable: false
                type: string
              style: simple
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  '/orders/{orderId}/items/{itemId}':
    parameters:
      - name: orderId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/MongoId'
      - name: itemId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/MongoId'
    delete:
      description: Delete item from order
      responses:
        '204':
          description: Item deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
components:
  responses:
    BadRequest:
      description: The request was malformed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EovError'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EovError'
    ServerError:
      description: There was an error in the server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EovError'
  schemas:
    EovError:
      description: Not Acceptable
      type: object
      example:
        message: '.response should have required property ''name'', .response should have required property ''id'''
        errors:
          - path: .response.name
            message: should have required property 'name'
            errorCode: required.openapi.validation
          - path: .response.id
            message: should have required property 'id'
            errorCode: required.openapi.validation
      properties:
        message:
          type: string
        errors:
          type: array
          items:
            type: object
            properties:
              path:
                type: string
              message:
                type: string
              errorCode:
                type: string
    Item:
      example:
        name: Canned tuna
        _id: 0123456789aBcDeF01234567
      properties:
        _id:
          $ref: '#/components/schemas/MongoId'
        name:
          $ref: '#/components/schemas/ItemName'
      required:
        - _id
        - name
      type: object
    ItemArray:
      type: array
      nullable: false
      items:
        $ref: '#/components/schemas/Item'
    ItemData:
      description: Item data without an _id.
      example:
        name: Canned tuna
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ItemName'
      required:
        - name
    ItemName:
      description: Name of the item.
      example: Canned tuna
      maxLength: 128
      minLength: 1
      nullable: false
      pattern: \S+
      type: string
    MongoId:
      description: Unique identifier consisting of a 24 digit hexidecimal values (a MongoDB stingified ObjectID)
      example: 0123456789aBcDeF01234567
      maxLength: 24
      minLength: 24
      nullable: false
      pattern: '^[a-zA-Z0-9]+$'
      type: string
    OrderArray:
      type: array
      nullable: false
      items:
        $ref: '#/components/schemas/Order'
    Order:
      example:
        _id: 0123456789aBcDeF01234567
        preferences: 'Pineapple, Froot Loops'
        restrictions: Peanut allergy
        items:
          - _id: 0123456789aBcDeF01234567
            name: Pasta
        email: tbeck@college.edu
      properties:
        _id:
          $ref: '#/components/schemas/MongoId'
        preferences:
          $ref: '#/components/schemas/Preferences'
        restrictions:
          $ref: '#/components/schemas/Restrictions'
        items:
          $ref: '#/components/schemas/ItemArray'
        email:
          $ref: '#/components/schemas/Email'
      required:
        - _id
        - items
        - email
      type: object
    OrderData:
      example:
        preferences: 'Pineapple, Froot Loops'
        restrictions: Peanut allergy
        items:
          - _id: 0123456789aBcDeF01234567
            name: Pasta
        email: tbeck@college.edu
      properties:
        preferences:
          $ref: '#/components/schemas/Preferences'
        restrictions:
          $ref: '#/components/schemas/Restrictions'
        items:
          $ref: '#/components/schemas/ItemArray'
        email:
          $ref: '#/components/schemas/Email'
      required:
        - items
        - email
      type: object
    Preferences:
      description: Food preferences.
      example: 'Pineapple, Froot Loops'
      maxLength: 128
      minLength: 1
      nullable: false
      pattern: \S+
      type: string
    Restrictions:
      description: Food restriction.
      example: Peanut Allergy
      maxLength: 128
      minLength: 1
      nullable: false
      pattern: \S+
      type: string
    Email:
      description: Email address
      example: tbeck@college.edu
      maxLength: 128
      minLength: 5
      nullable: false
      pattern: '^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$'
      type: string
